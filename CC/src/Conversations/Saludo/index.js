// import { Flow } from "../../Flow/Flow.js";
// import {Answer} from "../../Flow/Answer.js";
// import {OneLineMessage} from "../../Flow/utils/OneLineMessage.js";
//
// const cafes = ["Helado", "Con Leche", "Capuchino"]
//
// export const Final = new Flow()
//     .addAnswer("Gracias por su pedido! :D")
//     .addAnswer("Cafe Juanito agradece su preferencia")
//     .setName("Despedida")
//
// export class HeladoController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "extras", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu caf√© helado con {extras} estar√° listo pronto"))
//     }
// }
//
// export const FlowHelado = new Flow()
//     .addAnswer(`¬°Excelente elecci√≥n {name}! ‚òÉÔ∏è`)
//     .addAnswer("Nuestro caf√© helado es perfecto para d√≠as calurosos")
//     .addAnswer("¬øLe gustar√≠a agregarlo con:")
//     .addAnswer("1. Crema batida")
//     .addAnswer("2. Jarabe de vainilla")
//     .addAnswer("3. Sin extras")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(HeladoController)
//     .setName("Helado")
//     .setNextFlow(Final)
//
// export class CapuchinoController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "extras", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu capuchino con {extras} estar√° listo pronto"))
//     }
// }
//
// export const FlowCapuchino = new Flow()
//     .addAnswer(`¬°Magn√≠fica elecci√≥n {name}! ‚òï‚ú®`)
//     .addAnswer("Nuestro capuchino tiene la espuma perfecta")
//     .addAnswer("¬øLe gustar√≠a personalizarlo?")
//     .addAnswer("1. Capuchino cl√°sico")
//     .addAnswer("2. Con canela")
//     .addAnswer("3. Con chocolate")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(CapuchinoController)
//     .setName("Capuchino")
//     .setNextFlow(Final)
//
// export class ConLecheController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "leche", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu caf√© con leche {leche} estar√° listo pronto"))
//     }
// }
//
// export const FlowConLeche = new Flow()
//     .addAnswer(`¬°Perfecta elecci√≥n {name}! ‚òï`)
//     .addAnswer("Nuestro caf√© con leche es cremoso y delicioso")
//     .addAnswer("¬øQu√© tipo de leche prefiere?")
//     .addAnswer("1. Leche entera")
//     .addAnswer("2. Leche descremada")
//     .addAnswer("3. Leche de almendras")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(ConLecheController)
//     .setName("Con Leche")
//     .setNextFlow(Final)
//
// // Array con los flows reales (objetos), no strings
// const flows = [FlowHelado, FlowConLeche, FlowCapuchino]
//
// export class MenuController extends Answer {
//     waitForAnswer = true
//     async handler(ctx) {
//         const option = Number(ctx.body[0])
//
//         if (isNaN(option) || !cafes[option - 1]) {
//             await ctx.reply("Usted no ha seleccionado una opci√≥n v√°lida!")
//             ctx.moveToStep(ctx.phoneNumber, 0)
//             return
//         }
//
//         // Guardar la selecci√≥n en memoria
//         ctx.useMemo(ctx.phoneNumber, "cafe", cafes[option - 1])
//
//         // Enviar mensaje de confirmaci√≥n
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, `Usted ha seleccionado Caf√© {cafe}`))
//
//         // Cambiar el nextFlow del flow actual seg√∫n la opci√≥n
//         ctx.FlowContext.nextFlow = flows[option - 1]
//     }
// }
//
// export const MenuFlow = new Flow()
//     .addKeyboard(["menu", "men√∫"])
//     .addAnswer(`Buenas tardes se√±or {name}, ¬øc√≥mo lo puedo ayudar hoy?`)
//     .addAnswer(OneLineMessage(["Contamos con:", "1. Caf√© helado", "2. Caf√© con Leche", "3. Capuchino"]))
//     .addAnswer(MenuController)
//     .setName("Men√∫")
//
// export class Saludo extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "name", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Hola {name}!"))
//     }
// }
//
// export const FlowSaludo = new Flow()
//     .addKeyboard(["hello", "sup", "whats doing"])
//     .addKeyboard({
//         key: ["hola", "que onda", "weee"],
//         mode: "equals",
//         sensitive: false,
//     })
//     .addAnswer("[TESTING] - Hola, ¬øcu√°l es tu nombre?")
//     .addAnswer(Saludo)
//     .addAnswer("Ser√° redirigido al men√∫...")
//     .setNextFlow(MenuFlow)
//     .setName("Saludo")
//
import { Flow } from "../../Flow/Flow.js";
import { Answer } from "../../Flow/Answer.js";
import { OneLineMessage } from "../../Flow/utils/OneLineMessage.js";

//
// === FLUJO DE EMPLEADOS ===
//

class AskName extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "fullname", ctx.body);
        await ctx.reply("¬øCu√°l es tu DNI?");
    }
}

class AskDNI extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "dni", ctx.body);
        await ctx.reply("¬øCu√°l es tu n√∫mero de tel√©fono?");
    }
}

class AskPhone extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "phone", ctx.body);
        await ctx.reply("¬øCu√°l es tu correo electr√≥nico?");
    }
}

class AskEmail extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "email", ctx.body);
        await ctx.reply("¬øQu√© idioma hablas?");
    }
}

class AskLanguage extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "language", ctx.body);
        await ctx.reply("¬øCu√°l es tu direcci√≥n exacta?");
    }
}

class AskAddress extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "address", ctx.body);
        await ctx.reply("‚úÖ Procesando tus datos...");
    }
}

class ResumenEmpleado extends Answer {
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)

        const resumen = `
üìù *Resumen de tu registro en Humansisu*:
- Nombre completo: ${ctx.useMemo(ctx.phoneNumber, "fullname")}
- DNI: ${ctx.useMemo(ctx.phoneNumber, "dni")}
- Tel√©fono: ${ctx.useMemo(ctx.phoneNumber, "phone")}
- Correo: ${ctx.useMemo(ctx.phoneNumber, "email")}
- Idioma: ${ctx.useMemo(ctx.phoneNumber, "language")}
- Direcci√≥n: ${ctx.useMemo(ctx.phoneNumber, "address")}

‚úÖ ¬°Gracias por confiar en Humansisu! Pronto nos pondremos en contacto contigo.
        `;

        await ctx.reply(resumen);
    }
}


export const FlowEmployees = new Flow()
    .addAnswer("Perfecto, est√°s en el flujo para *personas que buscan empleo*.")
    .addAnswer("Primero, ¬øcu√°l es tu nombre completo?")
    .addAnswer(AskName)
    .addAnswer(AskDNI)
    .addAnswer(AskPhone)
    .addAnswer(AskEmail)
    .addAnswer(AskLanguage)
    .addAnswer(AskAddress)
    .addAnswer(ResumenEmpleado)
    .setName("FlowEmployees");


//
// === FLUJO DE EMPRESAS ===
//

class AskRTN extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "rtn", ctx.body);
        await ctx.reply("¬øCu√°l es el nombre de la empresa?");
    }
}

class AskCompanyName extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "company_name", ctx.body);
        await ctx.reply("¬øCu√°l es el correo de contacto?");
    }
}

class AskCompanyEmail extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "company_email", ctx.body);
        await ctx.reply("¬øCu√°ntos empleados tienen aproximadamente?");
    }
}

class AskCompanySize extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "company_size", ctx.body);
        await ctx.reply("¬øCu√°l es el rubro de la empresa?");
    }
}

class AskSector extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)
        ctx.useMemo(ctx.phoneNumber, "sector", ctx.body);
        await ctx.reply("‚úÖ Procesando la informaci√≥n de su empresa...");
    }
}

class ResumenEmpresa extends Answer {
    async handler(ctx) {
        await ctx.delayWithPresence("composing", 3)

        const resumen = `
üìù *Resumen del registro de su empresa en Humansisu*:
- RTN: ${ctx.useMemo(ctx.phoneNumber, "rtn")}
- Empresa: ${ctx.useMemo(ctx.phoneNumber, "company_name")}
- Correo: ${ctx.useMemo(ctx.phoneNumber, "company_email")}
- N¬∫ de empleados: ${ctx.useMemo(ctx.phoneNumber, "company_size")}
- Rubro: ${ctx.useMemo(ctx.phoneNumber, "sector")}

‚úÖ ¬°Gracias por confiar en Humansisu! Pronto un asesor lo contactar√°.
        `;

        await ctx.reply(resumen);
    }
}


export const FlowBusiness = new Flow()
    .addAnswer("Excelente, est√°s en el flujo para *empresas que desean reclutar*.")
    .addAnswer("A continuaci√≥n solicitaremos algunos datos:")
    .addAnswer(OneLineMessage([
        "1. RTN",
        "2. Nombre de la empresa",
        "3. Correo",
        "4. Cantidad de empleados",
        "5. Rubro",
    ]))
    .addAnswer("¬øCu√°l es su RTN?")
    .addAnswer(AskRTN)
    .addAnswer(AskCompanyName)
    .addAnswer(AskCompanyEmail)
    .addAnswer(AskCompanySize)
    .addAnswer(AskSector)
    .addAnswer(ResumenEmpresa)
    .setName("FlowBusiness");


//
// === FLUJO INICIAL ===
//

class SelectorController extends Answer {
    waitForAnswer = true;
    async handler(ctx) {
        const input = ctx.body.toLowerCase();
        await ctx.delayWithPresence("composing", 3)

        if (input.includes("empleo") || input.includes("trabajo")) {
            ctx.FlowContext.nextFlow = FlowEmployees;
        } else if (input.includes("empresa") || input.includes("reclutar")) {
            ctx.FlowContext.nextFlow = FlowBusiness;
        } else {
            await ctx.reply("Por favor, escribe *empleo* o *empresa* para continuar.");
            ctx.moveToStep(ctx.phoneNumber, 0);
        }
    }
}

export const FlowSaludo = new Flow()
    .addKeyboard(["hola", "hello"])
    .addAnswer("üëã ¬°Bienvenido a *Humansisu*!")
    .addAnswer(OneLineMessage([
        "¬øCon qui√©n tenemos el gusto de hablar?",
        "Seleccione una opci√≥n para continuar:",
        "1. Estoy buscando *empleo*",
        "2. Soy una *empresa* que desea reclutar",
    ]))
    .addAnswer(SelectorController)
    .setName("Saludo");


// "use client"
//
// import { Flow } from "../../Flow/Flow.js"
// import { Answer } from "../../Flow/Answer.js"
// import { OneLineMessage } from "../../Flow/utils/OneLineMessage.js"
//
// import { PDFReader } from "../../Flow/utils/PDFReader.js"
//
// const cafes = ["Helado", "Con Leche", "Capuchino", "Empleo"]
//
// export const Final = new Flow()
//     .addAnswer("Gracias por su pedido! :D")
//     .addAnswer("Cafe Juanito agradece su preferencia")
//     .setName("Despedida")
//
// export const FinalCV = new Flow()
//     .addAnswer("¬°Gracias por enviar tu CV! üìÑ")
//     .addAnswer("Nuestro equipo de recursos humanos lo revisar√°")
//     .addAnswer("Te contactaremos pronto si tu perfil encaja con nuestras vacantes")
//     .addAnswer("¬°Que tengas un excelente d√≠a! ‚òï")
//     .setName("Despedida CV")
//
// export class HeladoController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "extras", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu caf√© helado con {extras} estar√° listo pronto"))
//     }
// }
//
// export const FlowHelado = new Flow()
//     .addAnswer(`¬°Excelente elecci√≥n {name}! ‚òÉÔ∏è`)
//     .addAnswer("Nuestro caf√© helado es perfecto para d√≠as calurosos")
//     .addAnswer("¬øLe gustar√≠a agregarlo con:")
//     .addAnswer("1. Crema batida")
//     .addAnswer("2. Jarabe de vainilla")
//     .addAnswer("3. Sin extras")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(HeladoController)
//     .setName("Helado")
//     .setNextFlow(Final)
//
// export class CapuchinoController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "extras", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu capuchino con {extras} estar√° listo pronto"))
//     }
// }
//
// export const FlowCapuchino = new Flow()
//     .addAnswer(`¬°Magn√≠fica elecci√≥n {name}! ‚òï‚ú®`)
//     .addAnswer("Nuestro capuchino tiene la espuma perfecta")
//     .addAnswer("¬øLe gustar√≠a personalizarlo?")
//     .addAnswer("1. Capuchino cl√°sico")
//     .addAnswer("2. Con canela")
//     .addAnswer("3. Con chocolate")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(CapuchinoController)
//     .setName("Capuchino")
//     .setNextFlow(Final)
//
// export class ConLecheController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "leche", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Perfecto {name}! Tu caf√© con leche {leche} estar√° listo pronto"))
//     }
// }
//
// export const FlowConLeche = new Flow()
//     .addAnswer(`¬°Perfecta elecci√≥n {name}! ‚òï`)
//     .addAnswer("Nuestro caf√© con leche es cremoso y delicioso")
//     .addAnswer("¬øQu√© tipo de leche prefiere?")
//     .addAnswer("1. Leche entera")
//     .addAnswer("2. Leche descremada")
//     .addAnswer("3. Leche de almendras")
//     .addAnswer("Escriba su opci√≥n:")
//     .addAnswer(ConLecheController)
//     .setName("Con Leche")
//     .setNextFlow(Final)
//
// export class CVController extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         console.log("üîç DEBUG CVController - Iniciando verificaci√≥n")
//         console.log("- Body:", ctx.body)
//         console.log("- Tiene documento:", ctx.hasDocument())
//
//         if (ctx.hasDocument()) {
//             const documentInfo = ctx.getDocumentInfo()
//             console.log("üìÑ Informaci√≥n del documento:", documentInfo)
//
//             if (!documentInfo) {
//                 await ctx.reply("‚ùå Error al procesar el documento")
//                 ctx.moveToStep(ctx.phoneNumber, 0)
//                 return
//             }
//
//             const { fileName, fileSize, mimeType } = documentInfo
//
//             // Verificar que sea PDF o DOC
//             const validTypes = [
//                 "application/pdf",
//                 "application/msword",
//                 "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
//                 "application/octet-stream",
//             ]
//
//             const isValidType =
//                 validTypes.includes(mimeType) ||
//                 fileName.toLowerCase().includes(".pdf") ||
//                 fileName.toLowerCase().includes(".doc")
//
//             if (isValidType) {
//                 await ctx.reply("üì• Descargando y procesando tu CV...")
//                 await ctx.delayWithPresence("composing", 3)
//
//                 try {
//                     // Descargar el documento
//                     const buffer = await ctx.downloadDocument()
//
//                     // Guardar el archivo
//                     const savedFile = await PDFReader.saveDocument(buffer, fileName, ctx.phoneNumber)
//
//                     // Guardar informaci√≥n en memoria
//                     ctx.useMemo(ctx.phoneNumber, "cv_filename", fileName)
//                     ctx.useMemo(ctx.phoneNumber, "cv_size", fileSize)
//                     ctx.useMemo(ctx.phoneNumber, "cv_type", mimeType)
//                     ctx.useMemo(ctx.phoneNumber, "cv_path", savedFile.filePath)
//
//                     await ctx.reply(`‚úÖ CV recibido: "${fileName}"`)
//                     await ctx.reply(`üìä Tama√±o: ${Math.round(fileSize / 1024)} KB`)
//
//                     // Si es PDF, extraer y analizar el texto
//                     if (mimeType === "application/pdf" || fileName.toLowerCase().includes(".pdf")) {
//                         await ctx.reply("üîç Analizando contenido del CV...")
//                         await ctx.delayWithPresence("composing", 2)
//
//                         try {
//                             const pdfData = await PDFReader.extractTextFromPDF(buffer)
//                             const analysis = PDFReader.analyzeCV(pdfData.text)
//
//                             // Guardar an√°lisis en memoria
//                             ctx.useMemo(ctx.phoneNumber, "cv_text", pdfData.text.substring(0, 1000)) // Primeros 1000 caracteres
//                             ctx.useMemo(ctx.phoneNumber, "cv_pages", pdfData.pages)
//                             ctx.useMemo(ctx.phoneNumber, "cv_analysis", JSON.stringify(analysis))
//
//                             await ctx.reply("üìã An√°lisis de tu CV:")
//                             await ctx.reply(`üìÑ P√°ginas: ${pdfData.pages}`)
//
//                             if (analysis.hasEmail) {
//                                 await ctx.reply(`üìß Email encontrado: ${analysis.emails?.[0] || "S√≠"}`)
//                             }
//
//                             if (analysis.hasPhone) {
//                                 await ctx.reply(`üì± Tel√©fono encontrado: S√≠`)
//                             }
//
//                             const sections = []
//                             if (analysis.hasExperience) sections.push("Experiencia laboral")
//                             if (analysis.hasEducation) sections.push("Educaci√≥n")
//                             if (analysis.hasSkills) sections.push("Habilidades")
//
//                             if (sections.length > 0) {
//                                 await ctx.reply(`‚úÖ Secciones detectadas: ${sections.join(", ")}`)
//                             }
//
//                             if (analysis.keywords.length > 0) {
//                                 await ctx.reply(`üéØ Palabras clave relevantes: ${analysis.keywords.join(", ")}`)
//                             }
//
//                             if (analysis.languages.length > 0) {
//                                 await ctx.reply(`üåç Idiomas: ${analysis.languages.join(", ")}`)
//                             }
//
//                             // Log completo para el administrador
//                             console.log(`üìÑ CV PROCESADO EXITOSAMENTE:`)
//                             console.log(`- Candidato: ${ctx.useMemo(ctx.phoneNumber, "name") || "Sin nombre"}`)
//                             console.log(`- Tel√©fono: ${ctx.phoneNumber}`)
//                             console.log(`- Archivo: ${fileName}`)
//                             console.log(`- Guardado en: ${savedFile.filePath}`)
//                             console.log(`- P√°ginas: ${pdfData.pages}`)
//                             console.log(`- An√°lisis:`, analysis)
//                             console.log("=".repeat(60))
//                         } catch (pdfError) {
//                             console.error("‚ùå Error al procesar PDF:", pdfError)
//                             await ctx.reply("‚ö†Ô∏è CV recibido pero no pude analizar el contenido")
//                             await ctx.reply("El archivo se guard√≥ correctamente para revisi√≥n manual")
//                         }
//                     } else {
//                         await ctx.reply("üìÑ Documento recibido (formato DOC)")
//                         await ctx.reply("Se guard√≥ para revisi√≥n manual")
//                     }
//                 } catch (downloadError) {
//                     console.error("‚ùå Error al descargar documento:", downloadError)
//                     await ctx.reply("‚ùå Error al procesar el documento")
//                     await ctx.reply("Por favor intenta enviarlo nuevamente")
//                     ctx.moveToStep(ctx.phoneNumber, 0)
//                     return
//                 }
//             } else {
//                 await ctx.reply("‚ùå Por favor env√≠a tu CV en formato PDF o DOC/DOCX")
//                 await ctx.reply(`Tipo recibido: ${mimeType}`)
//                 ctx.moveToStep(ctx.phoneNumber, 0)
//                 return
//             }
//         } else {
//             // No hay documento
//             if (ctx.body && (ctx.body.toLowerCase().includes("cv") || ctx.body.toLowerCase().includes("curriculum"))) {
//                 await ctx.reply("üìÑ Para enviar tu CV:")
//                 await ctx.reply("1Ô∏è‚É£ Toca el √≠cono üìé (clip)")
//                 await ctx.reply("2Ô∏è‚É£ Selecciona 'Documento'")
//                 await ctx.reply("3Ô∏è‚É£ Elige tu CV (PDF o DOC)")
//                 await ctx.reply("4Ô∏è‚É£ Env√≠alo")
//                 ctx.moveToStep(ctx.phoneNumber, 0)
//                 return
//             } else {
//                 await ctx.reply("‚ùå No recib√≠ ning√∫n documento")
//                 await ctx.reply("Usa el bot√≥n üìé para adjuntar tu CV")
//                 ctx.moveToStep(ctx.phoneNumber, 0)
//                 return
//             }
//         }
//     }
// }
//
// export const FlowCV = new Flow()
//     .addAnswer(`¬°Excelente {name}! üíº`)
//     .addAnswer("Nos alegra saber que est√°s interesado en trabajar con nosotros")
//     .addAnswer("En Caf√© Juanito siempre buscamos talento apasionado por el caf√© ‚òï")
//     .addAnswer("üìÑ Por favor env√≠a tu CV en formato PDF o DOC")
//     .addAnswer("Usa el bot√≥n de üìé (clip) para adjuntar el archivo")
//     .addAnswer(CVController)
//     .setName("CV")
//     .setNextFlow(FinalCV)
//
// // Array con los flows reales (objetos), no strings
// const flows = [FlowHelado, FlowConLeche, FlowCapuchino, FlowCV]
//
// export class MenuController extends Answer {
//     waitForAnswer = true
//     async handler(ctx) {
//         const option = Number(ctx.body[0])
//
//         if (isNaN(option) || !cafes[option - 1]) {
//             await ctx.reply("Usted no ha seleccionado una opci√≥n v√°lida!")
//             ctx.moveToStep(ctx.phoneNumber, 0)
//             return
//         }
//
//         // Guardar la selecci√≥n en memoria
//         ctx.useMemo(ctx.phoneNumber, "seleccion", cafes[option - 1])
//
//         if (option === 4) {
//             // Opci√≥n de empleo
//             await ctx.reply("¬°Qu√© bueno que quieras formar parte de nuestro equipo! üéâ")
//         } else {
//             // Opciones de caf√©
//             await ctx.reply(ctx.MemoText(ctx.phoneNumber, `Usted ha seleccionado Caf√© {seleccion}`))
//         }
//
//         // Cambiar el nextFlow del flow actual seg√∫n la opci√≥n
//         ctx.FlowContext.nextFlow = flows[option - 1]
//     }
// }
//
// export const MenuFlow = new Flow()
//     .addKeyboard(["menu", "men√∫"])
//     .addAnswer(`Buenas tardes se√±or {name}, ¬øc√≥mo lo puedo ayudar hoy?`)
//     .addAnswer(
//         OneLineMessage(["Contamos con:", "1. Caf√© helado", "2. Caf√© con Leche", "3. Capuchino", "4. Empleo (Enviar CV)"]),
//     )
//     .addAnswer(MenuController)
//     .setName("Men√∫")
//
// export class Saludo extends Answer {
//     waitForAnswer = true
//     constructor() {
//         super()
//     }
//     async handler(ctx) {
//         await ctx.delayWithPresence("composing", 1)
//         ctx.useMemo(ctx.phoneNumber, "name", ctx.body)
//         await ctx.reply(ctx.MemoText(ctx.phoneNumber, "Hola {name}!"))
//     }
// }
//
// export const FlowSaludo = new Flow()
//     .addKeyboard(["hello", "sup", "whats doing"])
//     .addKeyboard({
//         key: ["hola", "que onda", "weee"],
//         mode: "equals",
//         sensitive: false,
//     })
//     .addAnswer("[TESTING] - Hola, ¬øcu√°l es tu nombre?")
//     .addAnswer(Saludo)
//     .addAnswer("Ser√° redirigido al men√∫...")
//     .setNextFlow(MenuFlow)
//     .setName("Saludo")
